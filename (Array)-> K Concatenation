class Solution {
    public int kConcatenationMaxSum(int[] arr, int k) {
//case 1: if k=1, use kadane's directly
//case 2: if the sum of whole array is positive, so we can take the kadane's of first and 2nd subarrays, and rest (k-2)*sum which is the rest of array having value positive 
//case 3: if the sum is negative, then the sum of positve values of 1 and 2 subarray is greter than sum of whole array containing lot of negative values
        if(k==1){
            return Kadane(arr);
        }
        else{
        int sum=0;
        for(int i=0;i<arr.length;i++){
            sum+=arr[i];            
        }
        if(sum>0){
            return Kadane(arr)+(k-2)*sum;
            
        }
            return Kadane(arr);    
        
    }
    }
    public static int Kadane(int[] arr){
//calculate the kadane for two array, eventually we are using 2 of them
        int[] res=new int[arr.length*2];
        for(int i=0;i<arr.length;i++){
            res[i]=arr[i];
        }
        for(int i=0;i<arr.length;i++){
            res[i+arr.length-1]=arr[i];
        }
        int a=Integer.MIN_VALUE;
        int b=0;
        for(int i=0;i<res.length;i++){
            b+=res[i];
            if(b>a){
                a=b;
            }
            if(a<0){
                a=0;
            }
        }
        return a;
    }
}
