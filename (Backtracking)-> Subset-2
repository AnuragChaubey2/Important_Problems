
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

//one thing we have to take care of is, we dont have to use, set because we will end up wasting extra time for converting set into list,
//so the alternative is to use list and make a check 

class Solution {
    int len;
    List<List<Integer>> output= new ArrayList();
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        for(len = 0;len<=nums.length;len++)
            getSubset(nums,0,new LinkedList());
      
        return output;
        
    }
    
    private void getSubset(int[] nums, int start, LinkedList<Integer> curr){
        if(start == len){
            output.add(new LinkedList(curr));
            return;
        }

        for(int i=start;i<nums.length;i++){
         
            if(i!=start && nums[i] == nums[i-1])
                continue;
           
            curr.add(nums[i]);

            getSubset(nums,i+1,curr);
            curr.removeLast();
        }
    }
}
