
import graph.LinkedList;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Queue;

class Tree{

        public static List<Integer> distanceK(TreeNode root,TreeNode target, int k){
           List<Integer> res=new ArrayList<>();
           if(root==null){
               return res;
           }
           HashMap<TreeNode,TreeNode> parentMap=new HashMap<>();
           findParent(parentMap,root);
           Queue<TreeNode> q=new LinkedList<>();
           HashSet<TreeNode> hs=new HashSet<>();
           q.add(target);
           while(!q.isEmpty()){
               
               for(int i=0;i<q.size();i++){
                   int curr=q.poll();
                   if(k==0){
                       res.add(root.val);
                   }
                   if(parentMap.containsKey(curr) && !hs.contains(parentMap.get(curr))){
                       q.add(parentMap.get(curr));
                   }
                   if(curr.left!=null && !hs.contains(curr.left)){
                       q.add(curr.left);
                   }
                   //same for right
               }
           }
           return res;
            
            
        }
        public static void findParent(HashMap<TreeNode,TreeNode> hm,TreeNode root){
            if(root==null){
                return;
            }
            if(root.left!=null){
                hm.put(root.left, root);
            }
            if(root.right!=null){
                hm.put(root.right, root);
            }
            findParent(hm,root.left);
            findParent(hm,root.right);
            return ;
            
        }
  }

class TreeNode{
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int val){
        this.val=val;
        left=right=null;
    }
}
