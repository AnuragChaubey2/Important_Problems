class Solution {
    int first(int[] arr,int target)
    {
        int l=0;
        int r=arr.length -1;
        int ans=-1;
        while(l<=r){
            int mid=l+((r-l)/2);
            if(arr[mid]==target)
            {
                r=mid-1;
                ans=mid;
            }
            else if(target<arr[mid])
                r=mid-1;
            else
                l=mid+1;  
        }
        return ans;
        //one is used to find the left side of the array and one for the right side of array 
    }
    int last(int[] arr,int target)
    {
        int l=0;
        int r=arr.length -1;
        int ans=-1;
        while(l<=r){
            int mid=l+((r-l)/2);
            if(arr[mid]==target)
            {
                l=mid+1;
                ans=mid;
            }
            else if(target<arr[mid])
                r=mid-1;
            else
                l=mid+1;  
        }
        return ans;
    }
    public int[] searchRange(int[] nums, int target) {
        return new int[]{first(nums,target),last(nums,target)};
        
    }
}
