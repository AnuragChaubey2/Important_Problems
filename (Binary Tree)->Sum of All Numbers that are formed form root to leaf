class AllPathSumOfBinaryTree{
    public static void main(String[] args){
    AllPathSumOfBinaryTree tree=new AllPathSumOfBinaryTree();
        tree.root=new TreeNode(6);
        tree.root.left = new TreeNode(3);
        tree.root.right = new TreeNode(5);
        tree.root.right.right = new TreeNode(4);
        tree.root.left.left = new TreeNode(2);
        tree.root.left.right = new TreeNode(5);
        tree.root.left.right.right = new TreeNode(4);
        tree.root.left.right.left = new TreeNode(7);
        System.out.print("Sum of all paths is " + 
        tree.treePathsSum(tree.root));
    }
    TreeNode root;
    int treePathsSum(TreeNode node) 
    {
        // Pass the initial value as 0 as there is nothing above root
        return GetAllPath(node, 0);
    }
  public  int GetAllPath(TreeNode root,int ans){
      if(root==null){
          return 0;
      }
      ans=ans*10+root.data;   //to get rid of using string concat and parse
      if(root.left==null && root.right==null){
          return ans;
      }
      return GetAllPath(root.left, ans)+GetAllPath(root.right, ans);
      //if not null..then check for each and every paths possible
  }

}
class TreeNode{
    int data;
    TreeNode left,right;
    TreeNode(int data){
        this.data=data;
        left=right=null;
    }
}
