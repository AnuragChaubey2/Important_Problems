class Array1{
    public static void main(String[] args){
        String s1="abcde";
        String s2="abe";
        int m=s1.length();
        int n=s2.length();
        System.out.println(LCS(s1,s2,m,n));
        
    }
//brute force approch -> we know that nc0+nc1+nc2+...+ncn=2pow n 
//so strings of lengh n has 2pow n-1 diffrent subsquence
//-1 because we do not consider subsequnce of 0..
//Time Complexity is  O(n*2pown) -> O(n) to check if there are equal characters in both string or not
    
    public static int LCS(String s1,String s2,int m,int n){
        if(m==0 || n==0){
            return 0;
    }
        if(s1.charAt(m-1)==s2.charAt(n-1)){
            return 1+LCS(s1,s2,m-1,n-1);
        }
        return Integer.max(LCS(s1,s2,m-1,n), LCS(s1,s2,m,n-1));
}
/* Complexity if this solution is m*n
    
    */    
    
    
    
public int longestCommonSubsequence(String text1, String text2) {

    int[][] dp = new int[text1.length()+1][text2.length()+1];
    int maxLength = Integer.MIN_VALUE;
    for (int i = 1;i <= text1.length(); i++)
    {
        for (int j = 1; j <= text2.length();j++)
        {
            if (text1.charAt(i-1) == text2.charAt(j-1))
            {
                dp[i][j]  = 1 + dp[i-1][j-1];
            }
            else
            {
                dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
            }
            maxLength = Math.max(maxLength,dp[i][j]);
        }
    }
    return maxLength;
}
}
    
    
    
