public class Solution {
    public boolean hasCycle(ListNode head) {
       
        if(head == null) {
            return false;
        }
        
        Set<ListNode> mySet = new HashSet<ListNode>();
        
        ListNode cur = head;
        
        while(cur.next != null) {
            if(mySet.contains(cur)) {
                return true;
            }
            mySet.add(cur);
            cur = cur.next;
        }        
        
        return false;
        
    }
}

//Tortoise and hair's algoirthm......space efficient
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null)    return false;
        ListNode tortoise = head, hare = head;
        while(hare.next != null && hare.next.next != null){
            tortoise = tortoise.next;
            hare = hare.next.next;
            if(tortoise == hare)
                return true;
        }
        return false;
    }
}
