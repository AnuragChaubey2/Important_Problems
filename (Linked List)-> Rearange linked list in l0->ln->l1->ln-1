class Solution {
    public void reorderList(ListNode head) {        
        if(head.next == null) return;
        
        ListNode mid = findMid(head);
        ListNode head2 = mid.next;   //make the next of the mid as head 2
        mid.next = null;  //and first list ka last element is mid
        
        head2 = reverse(head2);
        ListNode head1 = head;
        
        ListNode next1=null,next2=null;
        
        while(head2 != null) {
            next1 = head1.next;
            next2 = head2.next;
            
            head1.next=head2;
            head2.next=next1;
            
            head1 = next1;
            head2 = next2;
        }
    }
    
    ListNode findMid(ListNode node) {
        if(node == null || node.next == null) return node;
        ListNode slow=node,fast=node;
        
        while(fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    
    ListNode reverse(ListNode head) {
        if(head == null || head.next == null) return head;
        
        ListNode prev = null, curr=head, next = head.next;
        while(curr!= null) {
            next = curr.next;
            curr.next = prev;
            
            prev=curr;
            curr=next;
        }
        return prev;
    }
}
 class ListNode {
    int val;
      ListNode next;
      ListNode() {}
      ListNode(int val) { this.val = val; }
      ListNode(int val, ListNode next) { this.val = val; this.next = next; }
  }
